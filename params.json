{"name":"服务器运行模型","tagline":"服务器运行模型","body":"要编写出高性能的服务器程序就必须要设计好运行模型，现在比较有名的高性能服务器程序有Nginx、Redis、Memcached、Apache等等，他们的运行模型不尽相同。接下来介绍各种流行的服务器运行模型。\r\n\r\n## 一，单进程单线程阻塞式模型\r\n这种模型是最简单的模型，因为是最简单，所以性能也不太好。这种模型在一个周期只能处理一个请求，也就是说当服务器在处理某个请求时，其他请求必须等待当前请求完成才能被处理。模型图如下：\r\n ![](https://raw.githubusercontent.com/liexusong/liexusong.github.io/master/images/1.jpg)\r\n用伪代码表示如下：\r\n```C\r\nsock = socket();\r\nbind(sock);\r\nlisten(sock);\r\n\r\nwhile (1) {\r\n    nfd = accept(sock);\r\n    process_request(nfd);\r\n}\r\n```\r\n由于这种模型性能不佳，所以市面上还没有服务器使用这种模型，此模型一般作为教学例子使用。\r\n\r\n## 二，单进程单线程非阻塞模型\r\n与单进程单线程阻塞模型不同的是，此模型把所有的套接字句柄（下文称为fd）设置为非阻塞，当读写fd时返回EWOULDBLOCK错误时说明此fd没有数据可读写，这时我们应该选择其他的fd来进行读写操作。\r\n当然使用这种模型需要维护一个fd的列表，处理的时候需要遍历列表中所有的fd，当操作返回EWOULDBLOCK时，选择下一个fd进行处理。模型图如下：\r\n ![](https://raw.githubusercontent.com/liexusong/liexusong.github.io/master/images/12.jpg)\r\n用伪代码表示如下：\r\n```C\r\nsock = socket();\r\nset_nonblocking(sock);  // set fd to non-blocking\r\nbind(sock);\r\nlisten(sock);\r\n\r\nwhile (1) {\r\n    nfd = accept(sock);\r\n    set_nonblocking(nfd);    // set fd to non-blocking\r\n    add_list(list, nfd);\r\n\r\n    for_each(list, fd) {\r\n        process_request(fd);\r\n    }\r\n}\r\n```\r\n当然，此模型要比第一种模型要好，因为此模型可以同时处理多个请求。但此模型每次周期都需要遍历所有的fd检查其是否可读写，所以性能也不太高效。\r\n\r\n## 三，多线程/多进程模型\r\n多线程模型的原理是对于每个请求都申请一个线程/进程来处理，这样当某个请求被阻塞时，由于只会阻塞当前线程/进程，所以不会影响其他请求的处理。模型图如下：\r\n ![](https://raw.githubusercontent.com/liexusong/liexusong.github.io/master/images/3.jpg)\r\n用伪代码表示如下：\r\n```C\r\nsock = socket();\r\nbind(sock);\r\nlisten(sock);\r\n\r\nwhile (1) {\r\n    nfd = accept(sock);\r\n\r\n    switch (fork()) {\r\n    case 0:   /* child process */\r\n        process_request(nfd);\r\n        break;\r\n    default:  /* parent process */\r\n        break;\r\n    }\r\n}\r\n```\r\n因为每个请求都需要申请一个线程/进程来处理，所以当并发非常高的时候此模型会因为线程/进程上下文切换（线程/进程调度）而导致性能急剧下降。另外频繁的创建和销毁线程/进程也会导致性能下降。\r\n所以现代服务器程序也很少用这种模型，当然比较有名的HTTP服务器“Apache”是使用这种模型，但其使用线程池来解决频繁创建和销毁线程。\r\n\r\n## 四，事件通知模型\r\n事件通知模型是现代服务器最常用的模型，他能解决上面所有模型的问题：可以处理十万级请求，而且不会像多线程模型那样占用太多的系统资源。\r\n事件通知模型的原理是：使用多路复用I/O来监听所有请求fd，当某些fd可读写时会通知系统有fd可以进行读写操作，此时系统就会调用注册的回调函数来处理这些fd。\r\n模型图如下：\r\n ![](https://raw.githubusercontent.com/liexusong/liexusong.github.io/master/images/4.jpg)\r\n用伪代码表示如下：\r\n```C\r\nsock = socket();\r\nset_nonblocking(sock);\r\nbind(sock);\r\nlisten(sock);\r\n\r\nevent_add(sock);\r\n\r\nwhile (1) {\r\n    list = event_wait();\r\n\r\n    for_each(list, fd) {\r\n        if (fd == sock) {\r\n            nfd = accept(sock);\r\n            set_nonblocking(nfd);\r\n            event_add(nfd);\r\n        } else {\r\n            process(fd);\r\n        }\r\n    }\r\n}\r\n```\r\n使用事件通知模型的好处是：单进程单线程可以处理上万个请求，而且占用系统资源较少。但由于不同的操作系统，多路复用I/O的接口不尽相同，所以一般可以使用第三方的库来进行跨平台开发，比较有名的库有libevent、libev等。\r\n此模型在现代服务器程序中使用比较广泛，例如Nginx、Memcache、Redis等等。当然这些服务器除了使用事件通知模型之外还使用了多进程和多线程模型。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}